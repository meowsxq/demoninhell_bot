from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (Application, CommandHandler, MessageHandler, filters, ContextTypes)
import time
import asyncio
import random

COOLDOWN_TIME = 4
MAX_GROUPS = 2
user_forwarding_groups = {}
last_message_time = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = (
        "<b>üëã –ü—Ä–∏–≤–µ—Ç, –º–æ–π –º–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏—Å–ø–µ—à–Ω–∏–∫!</b> \n\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞.\n\n"
        "üîπ <b>–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É</b> /sendmsg <i>[–∏–¥ –≥—Ä—É–ø–ø—ã]</i>, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ —Å–æ—Å—Ç–æ–∏—Ç –±–æ—Ç.\n\n"
        "üì¢ <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è."
        "\n\n"
        "üîó <b>üòà–î–µ–º–æ–Ω–µ—Å—Å–∞:</b> <a href='https://t.me/demonic_Girlll'>–¢–´–ö</a>\n\n"
    )
    await update.message.reply_text(message, parse_mode='HTML')

    keyboard = [
        [InlineKeyboardButton("üëâ –ñ–ú–ò –°–Æ–î–ê!", url="https://t.me/demoninhellnew_bot?startgroup=true")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç", reply_markup=reply_markup)

    custom_keyboard = [
        [KeyboardButton("–ü–æ–º–æ—â—å"), KeyboardButton("Bug?"),KeyboardButton("–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —á–∞—Ç—ã"), KeyboardButton("–°—Ç–∏–∫–µ—Ä—ã")]
    ]
    reply_markup = ReplyKeyboardMarkup(custom_keyboard, resize_keyboard=True)
    #await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def sendmsg(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id, args = update.message.from_user.id, context.args
    user_forwarding_groups.setdefault(user_id, set())
    
    if not args: 
        return await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sendmsg [–∏–¥ –≥—Ä—É–ø–ø—ã]')
    
    try:
        group_id = int(args[0])
        chat = await context.bot.get_chat(group_id)
        if chat.type not in {'group', 'supergroup'}:
            return await update.message.reply_text('–£–∫–∞–∑–∞–Ω–Ω—ã–π ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π.')
    except Exception:
        return await update.message.reply_text('–ë–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
    
    if group_id in user_forwarding_groups[user_id]:
        user_forwarding_groups[user_id].discard(group_id)
        message = f'–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id} –æ—Ç–∫–ª—é—á–µ–Ω–∞.'
    elif len(user_forwarding_groups[user_id]) < MAX_GROUPS:
        user_forwarding_groups[user_id].add(group_id)
        message = f'–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id} –≤–∫–ª—é—á–µ–Ω–∞.'
    else:
        return await update.message.reply_text('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ–ª–µ–µ 2 –≥—Ä—É–ø–ø.')

    await update.message.reply_text(message)

async def lists_groups(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id in user_forwarding_groups and user_forwarding_groups[user_id]:
        groups_list = "\n".join(str(group_id) for group_id in user_forwarding_groups[user_id])
        await update.message.reply_text(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n{groups_list}")
    else:
        await update.message.reply_text("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")

async def forward_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user 
    user_id = user.id
    if user_id not in user_forwarding_groups:
        user_forwarding_groups[user_id] = set()

    global last_message_time
    current_time = time.time()

    if user_id in last_message_time: 
        if current_time - last_message_time[user_id] < COOLDOWN_TIME:
            await update.message.reply_text(f"–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return

    last_message_time[user_id] = current_time

    if user_forwarding_groups[user_id]:
        tasks = []
        if update.message.text:
            tasks.extend([context.bot.send_message(chat_id=group_id, text=update.message.text) for group_id in user_forwarding_groups[user_id]])
        elif update.message.photo:
            tasks.extend([context.bot.send_photo(chat_id=group_id, photo=update.message.photo[-1].file_id,
                                                 caption=update.message.caption) for group_id in user_forwarding_groups[user_id]])
        elif update.message.video:
            tasks.extend([context.bot.send_video(chat_id=group_id, video=update.message.video.file_id,
                                                 caption=update.message.caption) for group_id in user_forwarding_groups[user_id]])
        elif update.message.document:
            tasks.extend([context.bot.send_document(chat_id=group_id, document=update.message.document.file_id,
                                                    caption=update.message.caption) for group_id in user_forwarding_groups[user_id]])
        elif update.message.audio:
            tasks.extend([context.bot.send_audio(chat_id=group_id, audio=update.message.audio.file_id,
                                                 caption=update.message.caption) for group_id in user_forwarding_groups[user_id]])
        elif update.message.sticker:
            tasks.extend([context.bot.send_sticker(chat_id=group_id, sticker=update.message.sticker.file_id) for group_id in user_forwarding_groups[user_id]])
        elif update.message.voice:
            tasks.extend([context.bot.send_voice(chat_id=group_id, voice=update.message.voice.file_id,
                                                 caption=update.message.caption) for group_id in user_forwarding_groups[user_id]])
        elif update.message.poll:
            question = update.message.poll.question
            options = [option.text for option in update.message.poll.options]
            tasks.extend([context.bot.send_poll(chat_id=group_id, question=question, options=options,
                                                is_anonymous=update.message.poll.is_anonymous,
                                                allows_multiple_answers=update.message.poll.allows_multiple_answers) for group_id in user_forwarding_groups[user_id]])

        await asyncio.gather(*tasks)
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –≥—Ä—É–ø–ø—ã.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = (
        "<b>üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üîπ <b>/start</b> - üöÄ <i>–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º</i>\n\n"
        "üîπ <b>/sendmsg [–∏–¥ –≥—Ä—É–ø–ø—ã]</b> - üîÑ <i>–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã</i>\n\n"
        "‚öôÔ∏è <i>–£–∑–Ω–∞–π id –≥—Ä—É–ø–ø—ã:</i> @username_to_id_bot\n\n"
    )
    await update.message.reply_text(message, parse_mode='HTML')

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')

with open('sticker.txt', 'r') as file:
    stickers = [line.strip() for line in file.readlines()]

async def send_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if stickers:
        sticker_ids = random.sample(stickers, min(3, len(stickers)))
        tasks = [context.bot.send_sticker(chat_id=update.message.chat_id, sticker=sticker_id) for sticker_id in sticker_ids]
        await asyncio.gather(*tasks)
    else:
        await update.message.reply_text('–°–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø—É—Å—Ç.')

async def sticker_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    sticker = update.message.sticker
    if sticker:
        await update.message.reply_text(f'ID —Å—Ç–∏–∫–µ—Ä–∞: {sticker.file_id}')
    else:
        await update.message.reply_text('–≠—Ç–æ –Ω–µ —Å—Ç–∏–∫–µ—Ä.')

async def creator_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ó–∞ –±–∞–≥–∞–º–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏: @w1_w1_w1_w1")

def main() -> None:
    app = Application.builder().token("7119691423:AAGSYh3YUTiw-nDECLCnw37loGOArBbYk9M").connection_pool_size(256).build()
    app.add_handler(CommandHandler("start", start, filters.ChatType.PRIVATE))
    app.add_handler(CommandHandler("sendmsg", sendmsg, filters.ChatType.PRIVATE))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.Text(["Bug?"]), creator_info))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.Text(["–ü–æ–º–æ—â—å"]), help_command))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.Text(["–°—Ç–∏–∫–µ—Ä—ã"]), send_sticker))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.Text(["–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —á–∞—Ç—ã"]), lists_groups))
    app.add_handler(MessageHandler(filters.Sticker.ALL, sticker_id))
    app.add_handler(MessageHandler(filters.COMMAND & filters.ChatType.PRIVATE, unknown_command))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE, forward_message))
    app.run_polling()

if __name__ == '__main__':
    main()